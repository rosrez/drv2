<linux/fdtable.h>

static inline struct file * fcheck_files(struct files_struct *files, unsigned int fd)
{
    struct file * file = NULL;
    struct fdtable *fdt = files_fdtable(files);

    if (fd < fdt->max_fds)
       file = rcu_dereference_check_fdtable(files, fdt->fd[fd]);
       return file;
    }

/*
 * Check whether the specified fd has an open file.
 */
#define fcheck(fd)  fcheck_files(current->files, fd)

struct task_struct;

struct files_struct *get_files_struct(struct task_struct *);
void put_files_struct(struct files_struct *fs);
void reset_files_struct(struct files_struct *);
int unshare_files(struct files_struct **);
struct files_struct *dup_fd(struct files_struct *, int *);

===========================


kernel/exit.c

struct files_struct *get_files_struct(struct task_struct *task)
{
    struct files_struct *files;

    task_lock(task);
    files = task->files;
    if (files)
        atomic_inc(&files->count);
    task_unlock(task);

    return files;
}

void put_files_struct(struct files_struct *files)
{
    struct fdtable *fdt;

    if (atomic_dec_and_test(&files->count)) {
        close_files(files);
        /*
         * Free the fd and fdset arrays if we expanded
         * them.
         * If the fdtable was embedded, pass
         * files for freeing
         * at the end of the RCU
         * grace period. Otherwise,
         * you can free
         * files
         * immediately.
         */
        rcu_read_lock();
        fdt = files_fdtable(files);
        if (fdt != &files->fdtab)
            kmem_cache_free(files_cachep, files);
        free_fdtable(fdt);
        rcu_read_unlock();
    }
}

